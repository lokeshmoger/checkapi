{"note":"Don't delete this file! It's used internally to help with page regeneration.","tagline":"mini-framework to test API calls and their responses","body":"That mini-framework generate dynamics scenarios based upon on a config file in addition to test API calls and their responses.   \r\n\r\nIt is written in javascript and it uses Vows (to API tests, whereas it allows to create dynamic contexts - test cases) and Mocha (to helpers tests).\r\n\r\n## Prerequisites\r\n**Step 1:** Install node and npm. \r\n\r\n**Step 2:** Install all dependencies for the project.\r\n\r\n```\r\nnpm install\r\n```\r\n**Step 3:** Install mocha for run tests of helpers.\r\n\r\n```\r\nnpm install -g mocha\r\n```\r\n**Step 4:** Install vows for run dynamic tests of API.\r\n\r\n```\r\nnpm install -g vows\r\n```\r\n\r\n## Steps to run all tests of the helpers\r\n\r\nRun the following command: \r\n```\r\nmake test-others\r\n```\r\n\r\n## Steps to run the API tests\r\n\r\nRun the following command: \r\n```\r\nmake test-api\r\n```\r\n\r\n## How to configure \r\n\r\nModify the file configApiExample.json (rename it for better readability) with the config of your api.\r\n\r\nOpen the file **/test/configApiExample.json** in order to follow the information below.\r\n\r\n### API config\r\nData related to api and debug.\r\n\r\n### AUTH config\r\nData required to OAuth or Basic authentication. Wheter Basic so you can leave unnecessary fields blank.\r\n\r\n### RESOURCES config\r\n\r\nData for resources of your API.\r\n\r\n#### Details\r\n\r\n**\"name\"**: some alias to resource.  \r\n**\"url\"**: relative url to specific resource. Example: \"/search\". In url is possible has placeholder to some dynamic part. Example: \"/places/{placeId}/reviews/new\". Note that \"placeId\" is embraced by brackets {}. It tell to system generate a dynamic value based on \"placeId\" param.  \r\n**\"auth\"**: type of authentication. Can be \"oauth\" or \"basic\".  \r\n**\"methodHttp\"**: the name say all. Can be \"put\", \"post\", \"get\" or \"delete\".  \r\n\r\n##### params config\r\n\r\n**\"params\"**: all data relative to params of that resource (or some dynamic value in URL).  \r\n**\"name\"**: param name.  \r\n**\"scenario\"**: an array of mappings containing \"value\" and \"statusHttp\". All those values will be tested on.  \r\nIn a nutshell, the system will get a \"value\" from a scenario and will mix with all others needed params for that resource with POSITIVE (status http = 200) values. It ensures that wheter ypou are generating a negative scenario (e.g. status http = 400) so only current value is negative and others positive to test one negative thing by time. So, \"statusHttp\" make sense now, since expected result is relative to that specific value of the param, when it is sent with all others valid params.  \r\n\r\nExample: \r\n```\r\n    \"params\": [\r\n        \"name\": \"rating\",\r\n        \"scenario\": [\r\n                {\"value\": \"1\", \"statusHttp\": \"200\"},\r\n                {\"value\": \"2\", \"statusHttp\": \"200\"},\r\n                {\"value\": \"3\", \"statusHttp\": \"200\"},\r\n                {\"value\": \"4\", \"statusHttp\": \"200\"},\r\n                {\"value\": \"5\", \"statusHttp\": \"200\"},\r\n                {\"value\": \"0\", \"statusHttp\": \"400\"},\r\n                {\"value\": \"6\", \"statusHttp\": \"400\"},\r\n                {\"value\": \"a\", \"statusHttp\": \"400\"},\r\n                {\"value\": \"Ã©\", \"statusHttp\": \"400\"}\r\n         ]\r\n    ]\r\n```\r\nParams required by multiple resources can just referenced in params without \"scenario\".  \r\nIt will tell to system to use this param and get scenarios from \"paramsDefault\" (see below).  \r\n\r\nExample:\r\n```\r\n    \"params\": [\r\n        \"name\": \"type\"\r\n    ]\r\n```\r\n##### paramsDefault config\r\n\r\nPut here all params (or dynamic value to urls) that you want to use with multiple resources so you don't need to repeat yourself.  \r\n\r\n```\r\n\"paramsDefault\":\r\n    [\r\n        {\r\n            \"name\": \"type\",\r\n            \"scenario\": [\r\n                    {\"value\": \"json\", \"statusHttp\": \"200\"},\r\n                    {\"value\": \"xml\", \"statusHttp\": \"200\"},\r\n                    {\"value\": \"a\",\"statusHttp\": \"400\"}\r\n            ]\r\n        }\r\n    ]\r\n```\r\n\r\n### Dynamic values for scenario\r\n\r\nImagine that you need to test a resource that have a constraint to unique values. You can do it in the following way:\r\nInside \"value\" of a scenario, type the char ***$*** followed by a valid function name.\r\n\r\nExample: \r\n```\r\n {\r\n    \"name\": \"content\",\r\n    \"scenario\": [\r\n        { \"value\": \"$randomText(20)\", \"statusHttp\": \"200\" }\r\n    ]\r\n}\r\n```\r\n\r\nNote the value ***$randomText(20)***. Now, you can ask: ***WHERE is that function?***\r\nThe system will search that function in \"/lib/helper/config.js\" file. That function is there just for the sake of example.\r\nThat file should contain all your helper functions that you wants to generate dynamic values in config file.","google":"","name":"DoForMe api test"}